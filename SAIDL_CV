{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU",
    "gpuClass": "standard"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# **Generating Binary_Segmentation Masks**\n",
        "\n"
      ],
      "metadata": {
        "id": "FTkoRzCfRySS"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "tTr-EbcZcKhb"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "import torch\n",
        "from google.colab.patches import cv2_imshow\n",
        "import cv2"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_json(\"/content/drive/MyDrive/Modern Computer Vision/refer_train.json\")\n",
        "\n"
      ],
      "metadata": {
        "id": "b-xhcw3acrRh"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "\n",
        "from PIL import Image\n",
        "not_done1 = []\n",
        "folder_path = \"/content/drive/MyDrive/Modern Computer Vision/images\"  # Replace with the path to your folder\n",
        "mask_folder = \"/content/drive/MyDrive/Modern Computer Vision/Masked_Images_train\"\n",
        "\n",
        "for filename in os.listdir(folder_path): # Replace with the extension of your images\n",
        "  image_path = os.path.join(folder_path, filename)\n",
        "  image = Image.open(image_path)\n",
        "  lower = image.size[1]\n",
        "  upper = image.size[0]\n",
        "  lst = image_path.split(\"/\")\n",
        "  img_id = lst[-1][:-4]\n",
        "  try:\n",
        "    k = df[df[\"image_id\"] == int(img_id)]\n",
        "  except:\n",
        "    not_done.append(f\"{img_id}\")\n",
        "    continue\n",
        "  for item, row in k.iterrows():\n",
        "    phrase = row[\"phrase\"]\n",
        "    coords = row[\"Polygons\"]\n",
        "    array_coords = np.array(coords)\n",
        "    mask = np.zeros((lower, upper) , np.uint8)\n",
        "    try:\n",
        "      for i in range(array_coords.shape[1]):\n",
        "        array1 = np.array(array_coords[0][i], dtype = \"int32\")\n",
        "        array1 = array1.reshape((-1,1,2))\n",
        "      \n",
        "        cv2.fillPoly(mask, [array1],255)\n",
        "      \n",
        "    except:\n",
        "      try: \n",
        "        array_coords = np.array(array_coords[0])\n",
        "        for i in range(array_coords.shape[0]):\n",
        "          array1 = np.array(array_coords[i], dtype = \"int32\")\n",
        "          array1 = array1.reshape((-1,1,2))\n",
        "      \n",
        "          cv2.fillPoly(mask, [array1],255)\n",
        "        \n",
        "      except:\n",
        "        not_done.append(f\"{img_id}_{phrase}\")\n",
        "\n",
        "    try:\n",
        "      destination_path = os.path.join(mask_folder, f\"{img_id}_{phrase}.jpg\")\n",
        "      plt.imsave(destination_path,mask)\n",
        "    except:\n",
        "      not_done.append(f\"{img_id}_{phrase}\")\n",
        "\n",
        "            \n",
        "# Replace with the extension of your images\n",
        "\n",
        "        \n",
        "        "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7ymQutIvcvaa",
        "outputId": "8c3e09ab-4184-4530-d8d3-4e0e7ca12f9a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-50-fab00af0e8f6>:23: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n",
            "  array_coords = np.array(coords)\n",
            "<ipython-input-50-fab00af0e8f6>:34: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n",
            "  array_coords = np.array(array_coords[0])\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "not_done"
      ],
      "metadata": {
        "id": "h3IZFi57K1Qz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "folder_path = \"/content/drive/MyDrive/Modern Computer Vision/images\"  # Replace with the path to your folder\n",
        "mask_folder = \"/content/drive/MyDrive/Modern Computer Vision/Masked_Images_train\"\n",
        "not_done1 = []\n",
        "\n",
        "for filename in os.listdir(folder_path): # Replace with the extension of your images\n",
        "  image_path = os.path.join(folder_path, f\"{filename}.jpg\")\n",
        "  image = Image.open(image_path)\n",
        "  lower = image.size[1]\n",
        "  upper = image.size[0]\n",
        "  img_id = filename.split(\" \")[0]\n",
        "  try:\n",
        "    k = df[df[\"image_id\"] == int(img_id)]\n",
        "  except:\n",
        "    not_done1.append(f\"{img_id}\")\n",
        "    continue\n",
        "  for item, row in k.iterrows():\n",
        "    phrase = row[\"phrase\"]\n",
        "    coords = row[\"Polygons\"]\n",
        "    array_coords = np.array(coords)\n",
        "    mask = np.zeros((lower, upper) , np.uint8)\n",
        "    try:\n",
        "      for i in range(array_coords.shape[1]):\n",
        "        array1 = np.array(array_coords[0][i], dtype = \"int32\")\n",
        "        array1 = array1.reshape((-1,1,2))\n",
        "      \n",
        "        cv2.fillPoly(mask, [array1],255)\n",
        "      \n",
        "    except:\n",
        "      try: \n",
        "        array_coords = np.array(array_coords[0])\n",
        "        for i in range(array_coords.shape[0]):\n",
        "          array1 = np.array(array_coords[i], dtype = \"int32\")\n",
        "          array1 = array1.reshape((-1,1,2))\n",
        "      \n",
        "          cv2.fillPoly(mask, [array1],255)\n",
        "        \n",
        "      except:\n",
        "        not_done1.append(f\"{img_id}_{phrase}\")\n",
        "\n",
        "    try:\n",
        "      destination_path = os.path.join(mask_folder, f\"{img_id}_{phrase}.jpg\")\n",
        "      plt.imsave(destination_path,mask)\n",
        "    except:\n",
        "      not_done.append(f\"{img_id}_{phrase}\")\n"
      ],
      "metadata": {
        "id": "BuVfjzMw-DJy"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Creating Dataset**"
      ],
      "metadata": {
        "id": "p_4tGhBZR9Ft"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!unzip \"/content/drive/MyDrive/Modern Computer Vision/Mask.zip\""
      ],
      "metadata": {
        "id": "d4lBSFK04V_I"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "!unzip \"/content/drive/MyDrive/Modern Computer Vision/images.zip\""
      ],
      "metadata": {
        "id": "U1t-yLzg4WF5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "images_path = \"images\"\n",
        "mask_path = \"Train_images_masked\"\n",
        "val_image_path = \"images_val\"\n",
        "val_mask = \"Val_images_masked\""
      ],
      "metadata": {
        "id": "DXcRYpaxh669"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "train_data = os.listdir(mask_path)\n",
        "val_data = os.listdir(val_mask)"
      ],
      "metadata": {
        "id": "1F_QghXb5k7Q"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from PIL import Image"
      ],
      "metadata": {
        "id": "8wIt1InSaQ8u"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "mask =[Image.open(f\"{mask_path}/{i}\") for i in train_data]"
      ],
      "metadata": {
        "id": "6vWIQ_A5a36s"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "img_id = [f\"{i.split('_')[0]}\" for i in train_data]"
      ],
      "metadata": {
        "id": "G2i-VV3N5V_c"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "img_id.index(\"2319140 (1)\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EsfvYhhq7n4J",
        "outputId": "1c9d4c93-6a1e-483f-bb08-4b9b75e7743b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "76"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "img_ids = [f\"{''.join(i.split(' '))}\" for i in img_id]"
      ],
      "metadata": {
        "id": "BgKavP-261v0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "images = [Image.open(f\"{images_path}/{i}.jpg\") for i in img_ids]"
      ],
      "metadata": {
        "id": "IytPdNbg7wcU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "text = [f\"{i.split('_')[1]}\" for i in train_data]"
      ],
      "metadata": {
        "id": "aC9Nnw948UME"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from torch.utils.data import DataLoader\n",
        "\n",
        "BATCH_SIZE = 30\n",
        "\n",
        "train_dataloader = DataLoader(\n",
        "    train_data,\n",
        "    batch_size = BATCH_SIZE,\n",
        "    shuffle = True\n",
        ")\n",
        "\n",
        "test_dataloader = DataLoader(val_data,\n",
        "    batch_size=BATCH_SIZE,\n",
        "    shuffle=False\n",
        ")\n",
        "print(f\"Dataloaders: {train_dataloader, test_dataloader}\") \n",
        "print(f\"Length of train dataloader: {len(train_dataloader)} batches of {BATCH_SIZE}\")\n",
        "print(f\"Length of test dataloader: {len(test_dataloader)} batches of {BATCH_SIZE}\")"
      ],
      "metadata": {
        "id": "v9LeAZLDk6qV",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "fff897fb-ce7c-40f9-d32a-f4bf11cfa70d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Dataloaders: (<torch.utils.data.dataloader.DataLoader object at 0x7f08694b5570>, <torch.utils.data.dataloader.DataLoader object at 0x7f08694b60b0>)\n",
            "Length of train dataloader: 1025 batches of 30\n",
            "Length of test dataloader: 226 batches of 30\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#for x in test_dataloader:\n",
        "#  print(len(x))\n",
        "#   print(type(x))\n",
        "#   break"
      ],
      "metadata": {
        "id": "rA167_lTlaCM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Building ClipSegModel and setting up loss_fn and optimizer**"
      ],
      "metadata": {
        "id": "KoxbgtYCnNfR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "device = \"cuda\" if torch.cuda.is_available() else \"cpu\""
      ],
      "metadata": {
        "id": "qyDj5DEXqGGC"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "device"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WlRCbZ4bA_ed",
        "outputId": "2463e786-e606-44ad-b7e1-2e174c0aea02"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'cuda'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install -q git+https://github.com/huggingface/transformers.git"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "L5vpABFenSPa",
        "outputId": "18006db5-e392-46f7-8b93-ba07a66b20c4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\n",
            "  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\n",
            "  Preparing metadata (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from transformers import CLIPProcessor, CLIPSegForImageSegmentation,CLIPSegConfig\n",
        "\n",
        "processor = CLIPProcessor.from_pretrained(\"openai/clip-vit-base-patch16\")\n",
        "config = CLIPSegConfig.from_pretrained(\"CIDAS/clipseg-rd64-refined\")\n",
        "model = CLIPSegForImageSegmentation(config).to(device)"
      ],
      "metadata": {
        "id": "qEOgifR6o4V0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import torch\n",
        "from torch import nn\n",
        "loss_fn = nn.BCELoss()\n",
        "optimizer = torch.optim.SGD(params=model.parameters(), lr=0.01)"
      ],
      "metadata": {
        "id": "FIwMX1DqpUKX"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from timeit import default_timer as timer \n",
        "def print_train_time(start:float, end:float):\n",
        "  total_time = end - start\n",
        "  print(f\"Train time is: {total_time:.3f} seconds\")\n",
        "  return total_time"
      ],
      "metadata": {
        "id": "yXs9ytN1qRgg"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Training** **Model** using Binary Cross Entropy Loss\n"
      ],
      "metadata": {
        "id": "K-IeH1gvp6iv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from PIL import Image\n",
        "import numpy as np\n",
        "import cv2\n",
        "import torch\n",
        "import torch.nn.functional as F\n",
        "from sklearn.metrics import accuracy_score as acc_fn"
      ],
      "metadata": {
        "id": "EPDGf33HrnYE"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def train_step(model: torch.nn.Module,\n",
        "               data_loader: torch.utils.data.DataLoader,\n",
        "               loss_fn: torch.nn.Module,\n",
        "               optimizer: torch.optim.Optimizer,\n",
        "               loss_lst,\n",
        "               accuracy_fn,\n",
        "               device: torch.device = device):\n",
        "    train_loss , train_acc= 0,0\n",
        "    for batch, X in enumerate(data_loader):\n",
        "        # Send data to GPU\n",
        "        \n",
        "        prompts = [i.split(\"_\")[1].split(\".\")[0] for i in X]\n",
        "        img_id = [i.split(\"_\")[0] for i in X]\n",
        "        img_ids = [f\"{''.join(i.split(' '))}\" for i in img_id]\n",
        "        images = [Image.open(os.path.join(images_path, f'{i}.jpg')) for i in img_ids]\n",
        "        masks = [Image.open(os.path.join(mask_path, f'{i}')) for i in X]\n",
        "\n",
        "        inputs = processor(text=prompts, images=images, padding=\"max_length\", return_tensors=\"pt\")\n",
        "        inputs = inputs.to(device)\n",
        "        # 1. Forward pass\n",
        "        outputs = model(**inputs)\n",
        "        preds = outputs.logits\n",
        "        preds= torch.sigmoid(preds)\n",
        "        resized_shape = preds.shape[1:]\n",
        "\n",
        "        processed_images = []\n",
        "        for img in masks:\n",
        "            cv_image = cv2.cvtColor(np.array(img), cv2.COLOR_RGB2GRAY)\n",
        "            (thresh, bw_image) = cv2.threshold(cv_image, 100, 255, cv2.THRESH_BINARY)\n",
        "            bw_image = cv2.resize(bw_image, resized_shape)\n",
        "            sigmoid_output = torch.sigmoid(torch.Tensor(bw_image))\n",
        "            rounded_output = torch.round(torch.clamp(sigmoid_output, 0, 1))\n",
        "            processed_images.append(rounded_output)\n",
        "        y = torch.stack(processed_images)\n",
        "        y = y.to(device)\n",
        "        # 2. Calculate loss\n",
        "        loss = loss_fn(preds, y)\n",
        "        train_loss += loss\n",
        "        \n",
        "        accuracy = accuracy_fn(y, preds)\n",
        "        train_acc+=accuracy\n",
        "        if batch%200 == 0:\n",
        "          print(f\"{batch}, {loss}, accuarcy = {accuracy:.5f}\")\n",
        "          loss_lst.append(loss)\n",
        "        # 3. Optimizer zero grad\n",
        "        optimizer.zero_grad()\n",
        "\n",
        "        # 4. Loss backward\n",
        "        loss.backward()\n",
        "\n",
        "        # 5. Optimizer step\n",
        "        optimizer.step()\n",
        "\n",
        "    # Calculate loss and accuracy per epoch and print out what's happening\n",
        "    train_loss /= len(data_loader)\n",
        "    train_acc /= len(data_loader)\n",
        "    print(f\"Train loss: {train_loss:.5f}, Train accuracy: {train_acc:.5f}\")"
      ],
      "metadata": {
        "id": "1jfN7DA7qec5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def test_step(data_loader: torch.utils.data.DataLoader,\n",
        "              model: torch.nn.Module,\n",
        "              loss_fn: torch.nn.Module,\n",
        "              accuracy_fn,\n",
        "              device: torch.device = device):\n",
        "    test_loss, test_acc = 0, 0\n",
        "    model.eval() # put model in eval mode\n",
        "    # Turn on inference context manager\n",
        "    with torch.inference_mode(): \n",
        "        for batch,X in enumerate(data_loader):\n",
        "            # Send data to GPU\n",
        "            prompts = [i.split(\"_\")[1].split(\".\")[0] for i in X]\n",
        "            img_ids = [i.split(\"_\")[0] for i in X]\n",
        "            images = [Image.open(os.path.join(val_image_path, f'{i}.jpg')) for i in img_ids]\n",
        "            masks = [Image.open(os.path.join(val_mask, f'{i}')) for i in X]\n",
        "            \n",
        "            inputs = processor(text=prompts, images=images, padding=\"max_length\", return_tensors=\"pt\")\n",
        "            inputs = inputs.to(device)\n",
        "            # 1. Forward pass\n",
        "            outputs = model(**inputs)\n",
        "            preds = outputs.logits\n",
        "            preds= torch.sigmoid(preds)\n",
        "            resized_shape = preds.shape[1:]\n",
        "\n",
        "            processed_images = []\n",
        "            for img in masks:\n",
        "                cv_image = cv2.cvtColor(np.array(img), cv2.COLOR_RGB2GRAY)\n",
        "                (thresh, bw_image) = cv2.threshold(cv_image, 100, 255, cv2.THRESH_BINARY)\n",
        "                bw_image = cv2.resize(bw_image, resized_shape)\n",
        "                sigmoid_output = torch.sigmoid(torch.Tensor(bw_image))\n",
        "                rounded_output = torch.round(torch.clamp(sigmoid_output, 0, 1))\n",
        "                processed_images.append(rounded_output)\n",
        "            y = torch.stack(processed_images)\n",
        "            y = y.to(device)\n",
        "            # 2. Calculate loss and accuracy\n",
        "            loss = loss_fn(preds, y)\n",
        "\n",
        "            test_loss = test_loss+loss\n",
        "            preds = torch.round(torch.clamp(preds, 0, 1))\n",
        "\n",
        "            #for i in range(y.shape[0]):\n",
        "            accuracy = accuracy_fn(y.cpu(), preds.cpu()) # Go from logits -> pred labels\n",
        "            accuracy = accuracy\n",
        "            test_acc+=accuracy\n",
        "            if batch%50 == 0:\n",
        "              print(f\"{batch}, {accuracy}\")\n",
        "\n",
        "            test_acc+=accuracy\n",
        "        \n",
        "        # Adjust metrics and print out\n",
        "        test_loss /= len(data_loader)\n",
        "        test_acc /= len(data_loader)\n",
        "        print(f\"Test loss: {test_loss:.5f} | Test accuracy: {test_acc:.2f}\\n\")"
      ],
      "metadata": {
        "id": "KmJijvRywSuv"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Measure time\n",
        "from timeit import default_timer as timer\n",
        "train_time_start_model_1 = timer()\n",
        "from tqdm.auto import tqdm\n",
        "# Train and test model \n",
        "losses = []\n",
        "epochs = 5\n",
        "for epoch in tqdm(range(epochs)):\n",
        "    print(f\"Epoch: {epoch}\\n---------\")\n",
        "    train_step(data_loader=train_dataloader, \n",
        "        model=model, \n",
        "        loss_fn=loss_fn,\n",
        "        optimizer=optimizer,\n",
        "        loss_lst = losses,\n",
        "        device=device\n",
        "    )\n",
        "    test_step(data_loader=test_dataloader,\n",
        "        model=model,\n",
        "        loss_fn=loss_fn,\n",
        "        accuracy_fn=acc_fn,\n",
        "        device=device\n",
        "    )\n",
        "\n",
        "train_time_end_model_1 = timer()\n",
        "total_train_time_model_1 = print_train_time(start=train_time_start_model_1,\n",
        "                                           end=train_time_end_model_1,\n",
        "                                           )"
      ],
      "metadata": {
        "id": "nFQ7ONx-y7tm"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import torch\n",
        "\n",
        "def iou_coef(y_true, y_pred, smooth=1):\n",
        "    intersection = torch.sum(torch.abs(y_true * y_pred), dim=[1, 2])\n",
        "    union = torch.sum(y_true, [1, 2]) + torch.sum(y_pred, [1, 2]) - intersection\n",
        "    iou = torch.mean((intersection + smooth) / (union + smooth), dim=0)\n",
        "    return iou\n"
      ],
      "metadata": {
        "id": "5tdhNYlRlj2J"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "!unzip \"/content/drive/MyDrive/Modern Computer Vision/drive-download-20230428T192158Z-001.zip\""
      ],
      "metadata": {
        "id": "JtCy4yWHV67x"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "losses_numpy = [t.detach().cpu().numpy() for t in losses]\n",
        "plt.plot([i for i in range(len(losses_numpy))],losses_numpy)\n"
      ],
      "metadata": {
        "id": "BcgZ3LFMMtxL",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 450
        },
        "outputId": "07889ff3-6464-4305-9047-daecf4b3a007"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7f9484032f20>]"
            ]
          },
          "metadata": {},
          "execution_count": 67
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "test_step(data_loader=test_dataloader,\n",
        "        model=model,\n",
        "        loss_fn=loss_fn,\n",
        "        accuracy_fn=iou_coef,\n",
        "        device=device\n",
        "    )"
      ],
      "metadata": {
        "id": "cNOUVqXplHPe"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from pathlib import Path\n",
        "\n",
        "# Create models directory (if it doesn't already exist), see: https://docs.python.org/3/library/pathlib.html#pathlib.Path.mkdir\n",
        "MODEL_PATH = Path(\"models\")\n",
        "MODEL_PATH.mkdir(parents=True, # create parent directories if needed\n",
        "                 exist_ok=True # if models directory already exists, don't error\n",
        ")\n",
        "\n",
        "# Create model save path\n",
        "MODEL_NAME = \"03_gumbel_weights.pth\"\n",
        "MODEL_SAVE_PATH = MODEL_PATH / MODEL_NAME\n",
        "\n",
        "# Save the model state dict\n",
        "print(f\"Saving model to: {MODEL_SAVE_PATH}\")\n",
        "torch.save(obj=model.state_dict(), # only saving the state_dict() only saves the learned parameters\n",
        "           f=MODEL_SAVE_PATH)"
      ],
      "metadata": {
        "id": "qsPFLXGt-QFw",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "36affe45-da56-4bc0-e7eb-a18f3000de64"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving model to: models/03_gumbel_weights.pth\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Training Model using DiceLoss**"
      ],
      "metadata": {
        "id": "E-EOMD6bfRdb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def train_step(model: torch.nn.Module,\n",
        "               data_loader: torch.utils.data.DataLoader,\n",
        "               loss_fn: torch.nn.Module,\n",
        "               optimizer: torch.optim.Optimizer,\n",
        "               loss_lst,\n",
        "               device: torch.device = device):\n",
        "    train_loss = 0\n",
        "    for batch, X in enumerate(data_loader):\n",
        "        # Send data to GPU\n",
        "        \n",
        "        prompts = [i.split(\"_\")[1].split(\".\")[0] for i in X]\n",
        "        img_id = [i.split(\"_\")[0] for i in X]\n",
        "        img_ids = [f\"{''.join(i.split(' '))}\" for i in img_id]\n",
        "        images = [Image.open(os.path.join(images_path, f'{i}.jpg')) for i in img_ids]\n",
        "        masks = [Image.open(os.path.join(mask_path, f'{i}')) for i in X]\n",
        "\n",
        "        inputs = processor(text=prompts, images=images, padding=\"max_length\", return_tensors=\"pt\")\n",
        "        inputs = inputs.to(device)\n",
        "        # 1. Forward pass\n",
        "        outputs = model(**inputs)\n",
        "        preds = outputs.logits\n",
        "        preds= torch.sigmoid(preds)\n",
        "        resized_shape = preds.shape[1:]\n",
        "\n",
        "        processed_images = []\n",
        "        for img in masks:\n",
        "            cv_image = cv2.cvtColor(np.array(img), cv2.COLOR_RGB2GRAY)\n",
        "            (thresh, bw_image) = cv2.threshold(cv_image, 100, 255, cv2.THRESH_BINARY)\n",
        "            bw_image = cv2.resize(bw_image, resized_shape)\n",
        "            sigmoid_output = torch.sigmoid(torch.Tensor(bw_image))\n",
        "            rounded_output = torch.round(torch.clamp(sigmoid_output, 0, 1))\n",
        "            processed_images.append(rounded_output)\n",
        "        y = torch.stack(processed_images)\n",
        "        y = y.to(device)\n",
        "        # 2. Calculate loss\n",
        "        loss = loss_fn(preds, y)\n",
        "        train_loss += loss\n",
        "        \n",
        "        \n",
        "        if batch%200 == 0:\n",
        "          print(f\"{batch}, {loss}\")\n",
        "          loss_lst.append(loss)\n",
        "        # 3. Optimizer zero grad\n",
        "        optimizer.zero_grad()\n",
        "\n",
        "        # 4. Loss backward\n",
        "        loss.backward()\n",
        "\n",
        "        # 5. Optimizer step\n",
        "        optimizer.step()\n",
        "\n",
        "    # Calculate loss and accuracy per epoch and print out what's happening\n",
        "    train_loss /= len(data_loader)\n",
        "    print(f\"Train loss: {train_loss:.5f}\")"
      ],
      "metadata": {
        "id": "KOt_BaOArwGm"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def test_step(data_loader: torch.utils.data.DataLoader,\n",
        "              model: torch.nn.Module,\n",
        "              loss_fn: torch.nn.Module,\n",
        "              accuracy_fn,\n",
        "              device: torch.device = device):\n",
        "    test_loss, test_acc = 0, 0\n",
        "    model.eval() # put model in eval mode\n",
        "    # Turn on inference context manager\n",
        "    with torch.inference_mode(): \n",
        "        for batch,X in enumerate(data_loader):\n",
        "            # Send data to GPU\n",
        "            prompts = [i.split(\"_\")[1].split(\".\")[0] for i in X]\n",
        "            img_ids = [i.split(\"_\")[0] for i in X]\n",
        "            images = [Image.open(os.path.join(val_image_path, f'{i}.jpg')) for i in img_ids]\n",
        "            masks = [Image.open(os.path.join(val_mask, f'{i}')) for i in X]\n",
        "            \n",
        "            inputs = processor(text=prompts, images=images, padding=\"max_length\", return_tensors=\"pt\")\n",
        "            inputs = inputs.to(device)\n",
        "            # 1. Forward pass\n",
        "            outputs = model(**inputs)\n",
        "            preds = outputs.logits\n",
        "            preds= torch.sigmoid(preds)\n",
        "            resized_shape = preds.shape[1:]\n",
        "\n",
        "            processed_images = []\n",
        "            for img in masks:\n",
        "                cv_image = cv2.cvtColor(np.array(img), cv2.COLOR_RGB2GRAY)\n",
        "                (thresh, bw_image) = cv2.threshold(cv_image, 100, 255, cv2.THRESH_BINARY)\n",
        "                bw_image = cv2.resize(bw_image, resized_shape)\n",
        "                sigmoid_output = torch.sigmoid(torch.Tensor(bw_image))\n",
        "                rounded_output = torch.round(torch.clamp(sigmoid_output, 0, 1))\n",
        "                processed_images.append(rounded_output)\n",
        "            y = torch.stack(processed_images)\n",
        "            y = y.to(device)\n",
        "            # 2. Calculate loss and accuracy\n",
        "            loss = loss_fn(preds, y)\n",
        "\n",
        "            test_loss = test_loss+loss\n",
        "            preds = torch.round(torch.clamp(preds, 0, 1))\n",
        "\n",
        "            #for i in range(y.shape[0]):\n",
        "            accuracy = accuracy_fn(y, preds) # Go from logits -> pred labels\n",
        "            test_acc+=accuracy\n",
        "            if batch%50 == 0:\n",
        "              print(f\"{batch}, {accuracy}\")\n",
        "\n",
        "        \n",
        "        # Adjust metrics and print out\n",
        "        test_loss /= len(data_loader)\n",
        "        test_acc /= len(data_loader)\n",
        "        print(f\"Test loss: {test_loss:.5f} | Test accuracy: {test_acc:.5f}\\n\")"
      ],
      "metadata": {
        "id": "VwwT_vYQr28l"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model_2 = CLIPSegForImageSegmentation(config).to(device)"
      ],
      "metadata": {
        "id": "yb3rz80TkWE2"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import torch.nn as nn\n",
        "\n",
        "class DiceLoss(nn.Module):\n",
        "    def __init__(self, smooth=1e-6, gama=2):\n",
        "        super(DiceLoss, self).__init__()\n",
        "        self.smooth = smooth\n",
        "        self.gama = gama\n",
        "\n",
        "    def forward(self, y_pred, y_true):\n",
        "        y_true, y_pred = y_true.float(), y_pred.float()\n",
        "        numerator = 2 * torch.sum(y_pred * y_true) + self.smooth\n",
        "            \n",
        "        denominator = torch.sum(\n",
        "            y_pred ** self.gama) + torch.sum(y_true ** self.gama) + self.smooth\n",
        "        result = 1 - numerator / denominator\n",
        "        return result\n"
      ],
      "metadata": {
        "id": "dvr6jgygk8LB"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import torch\n",
        "\n",
        "def iou_coef(y_true, y_pred, smooth=1):\n",
        "    intersection = torch.sum(torch.abs(y_true * y_pred), dim=[1, 2])\n",
        "    union = torch.sum(y_true, [1, 2]) + torch.sum(y_pred, [1, 2]) - intersection\n",
        "    iou = torch.mean((intersection + smooth) / (union + smooth), dim=0)\n",
        "    return iou\n"
      ],
      "metadata": {
        "id": "ox17Cz-iqOT6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "loss_fn_2 = DiceLoss()\n",
        "optimizer_2 = torch.optim.SGD(params=model_2.parameters(), lr=0.01)"
      ],
      "metadata": {
        "id": "szShJrwYlEcP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Measure time\n",
        "from timeit import default_timer as timer\n",
        "train_time_start_model_1 = timer()\n",
        "from tqdm.auto import tqdm\n",
        "# Train and test model \n",
        "losses_2 = []\n",
        "epochs = 5\n",
        "for epoch in tqdm(range(epochs)):\n",
        "    print(f\"Epoch: {epoch}\\n---------\")\n",
        "    train_step(data_loader=train_dataloader, \n",
        "        model=model_2, \n",
        "        loss_fn=loss_fn_2,\n",
        "        optimizer=optimizer_2,\n",
        "        loss_lst = losses_2,\n",
        "        device=device\n",
        "    )\n",
        "    test_step(data_loader=test_dataloader,\n",
        "        model=model_2,\n",
        "        loss_fn=loss_fn_2,\n",
        "        accuracy_fn=iou_coef,\n",
        "        device=device\n",
        "    )\n",
        "\n",
        "train_time_end_model_1 = timer()\n",
        "total_train_time_model_1 = print_train_time(start=train_time_start_model_1,\n",
        "                                           end=train_time_end_model_1,\n",
        "                                           )"
      ],
      "metadata": {
        "id": "0jXxWYYplQLd"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}